import json

from django.http import HttpResponse
from rest_framework import status
from rest_framework.views import APIView
from .managementService import ManagementService
from .validationService import ValidationService


def ping(request):
    return HttpResponse("pong")


def getMaxTransactionVolume(request):
    try:
        result = ManagementService.getMaxTransactionVolume()
        if result is not None:
            return HttpResponse(json.dumps(result),
                                status=status.HTTP_200_OK)
        else:
            return HttpResponse("No transaction has been found",
                                status=status.HTTP_404_NOT_FOUND)
    except:
        # TODO log
        return HttpResponse("Could not perform the request",
                            status=status.HTTP_400_BAD_REQUEST)


def getBalance(request, accountId):
    if ValidationService.checkUUID(accountId):
        account = ManagementService.getAccountById(accountId)
        if account is not None:
            return HttpResponse(json.dumps({"balance": account.balance}),
                                status=status.HTTP_200_OK)
        else:
            return HttpResponse("Account not found",
                                status=status.HTTP_404_NOT_FOUND)
    else:
        return HttpResponse("Invalid UUID",
                            status=status.HTTP_400_BAD_REQUEST)


class Transaction(APIView):

    # if transaction id is provided from request I would have used PUT instead, with Transaction-Id in url
    # or would have kept POST with autogenerated Transaction-Id

    @staticmethod
    def post(request):
        if request.content_type != 'application/json':
            return HttpResponse("Specified content type not allowed",
                                status=status.HTTP_415_UNSUPPORTED_MEDIA_TYPE)
        if "Transaction-Id" not in request.headers:
            return HttpResponse("Missing Transaction-Id in headers",
                                status=status.HTTP_400_BAD_REQUEST)
        if request.body:
            try:
                jsonBody = json.loads(request.body.decode('utf-8'))
            except:
                return HttpResponse("Invalid json body",
                                    status=status.HTTP_400_BAD_REQUEST)

            if "account_id" not in jsonBody or "amount" not in jsonBody:
                return HttpResponse("Mandatory body parameters missing",
                                    status=status.HTTP_400_BAD_REQUEST)

            accountId = jsonBody["account_id"]
            transactionId = request.headers["Transaction-Id"]
            amount = jsonBody["amount"]

            if ValidationService.checkUUID(accountId) and \
                    ValidationService.checkUUID(transactionId) and \
                    ValidationService.checkNumerical(amount):
                try:
                    if ManagementService.postTransaction(transactionId, accountId, amount):
                        return HttpResponse("Transaction created", status=status.HTTP_200_OK)
                    else:
                        return HttpResponse("Transaction not created, missing account_id",
                                            status=status.HTTP_400_BAD_REQUEST)
                except:
                    # TODO log
                    return HttpResponse("Could not perform the request",
                                        status=status.HTTP_400_BAD_REQUEST)
            else:
                return HttpResponse("Incorrect Parameter type", status=status.HTTP_400_BAD_REQUEST)

        else:
            return HttpResponse("Empty request body", status=status.HTTP_400_BAD_REQUEST)


@staticmethod
def get(request, transactionId):
    if ValidationService.checkUUID(transactionId):
        transaction = ManagementService.getTransactionById(transactionId)
        if transaction is not None:
            return HttpResponse(str(transaction), status=status.HTTP_200_OK)
        else:
            return HttpResponse("Transaction not found", status=status.HTTP_404_NOT_FOUND)
    else:
        return HttpResponse("Invalid UUID",
                            status=status.HTTP_400_BAD_REQUEST)
